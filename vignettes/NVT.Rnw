%\VignetteIndexEntry{Visualize and RNA-seq data normalization with the "NVT" package}
%\VignettePackage{NVT}
%\VignetteEngine{knitr::knitr}

% To compile this document
% library('knitr'); rm(list=ls()); knit('NVT.Rnw')

\documentclass[11pt]{article}

\newcommand{\nvt}{\textit{NVT}}
\newcommand{\lowtilde}{\raise.17ex\hbox{$\scriptstyle\mathtt{\sim}$}}

<<knitr, echo=FALSE, results="hide">>=
library("knitr")
opts_chunk$set(
  tidy=FALSE,
  dev="png",
  fig.show="hide",
  #fig.width=4, fig.height=4.5,
  #cache=TRUE,
  message=FALSE)
@

<<style-knitr, eval=TRUE, echo=FALSE, results="asis">>=
BiocStyle::latex()
@

\author{Thomas Eder$^{1,2}$, Florian Grebien$^{1}$, Thomas Rattei$^{2}$\\[1em]
  \small{$^{1}$ Ludwig Boltzmann Institute for Cancer Research,} \\
  \small{W{\"a}hringer Stra{\ss}e 13A, 1090 Vienna, Austria.} \\
  \small{$^{2}$ CUBE Division of Computational Systems Biology,} \\
  \small{Department of Microbiology and Ecosystem Science,} \\
  \small{University of Vienna, Althanstra{\ss}e 14, 1090 Vienna, Austria.} }

\title{Visualization and assessment of RNA-Seq data normalization - the Normalization Visualization Tool}

\begin{document}


\maketitle

\begin{abstract}

Measuring differential gene expression is a common task in the analysis of RNA-Seq data.
To identify differentially expressed genes between two samples, it is crucial to normalize the data sets.
While multiple normalization methods are available, all of them are based on certain assumptions that
may or may not be suitable for the type of data they are applied on. Researchers therefore need to select
an adequate normalization strategy for each RNA-Seq experiment. This selection includes exploration of
different normalization methods as well as their comparison. Methods that agree with each other most
likely represent realistic assumptions under the particular experimental conditions.
We developed the \nvt{} package, which provides a fast and simple way to analyze and evaluate
multiple normalization methods via visualization and representation of correlation values, based on a user-defined set of uniformly expressed genes. This vignette explains the use of the package and demonstrates a typical work flow.

  \vspace{1em}

  \textbf{NVT version:} \Sexpr{packageVersion("NVT")}

  \vspace{1em}

  \begin{center}
    \begin{tabular}{ | l | }
      \hline
      If you use \nvt{} in published research, please cite:  \\
      \\
      T. Eder, F. Grebien, T. Rattei: \textbf{NVT: a fast and simple tool for} \\
      \textbf{the assessment of RNA-Seq normalization strategies}. \\
      \emph{Bioinformatics} 2016, \textbf{XX}:XXX. \\
      \url{http://bioinformatics.oxfordjournals.org/content/early/2016/08/11/bioinformatics.btw521.abstract}  \\
      \hline
    \end{tabular}
  \end{center}

\end{abstract}

\newpage

\tableofcontents

\newpage

\section{Installation}

The latest NVT package can be downloaded from: \url{https://github.com/Edert/NVT/releases}. The installation of the package can be done directly in R.

<<installNVT, eval=FALSE>>=
install.packages(file.path("/home/user/Downloads/","NVT_1.0.tar.gz"),
repos=NULL, type="source")
@

\section{Standard work flow}

Initially the library has to be loaded, which provides access to the data examples \ref{sec:loaddata} and the \nvt functions.

<<loadNVT>>=
library("NVT")
@

\subsection{Load data}

For the demonstration of the \nvt functions we need gene expression data, so we load the example data provided with the package. We use the two human expression data sets \textit{GSM1275862} and \textit{GSM1275863} from the \href{https://bioconductor.org/packages/release/data/experiment/html/airway.html}{airway}\cite{himes2014} package.

\subsubsection{Load expression data} \label{sec:loaddata}

We simply load the provided data sets \textit{myexp1} from \textit{GSM1275862}, \textit{myexp2} from \textit{GSM1275863} and the length data per gene as \textit{mylen}.

<<loadExData>>=
data(mylen)
data(myexp1)
data(myexp2)

#show just the first four elements of the loaded data
head(mylen,4)
head(myexp1,4)
@

In order to evaluate the expression between the two RNA-seq expression samples, we have to define a list of human housekeeping genes \textit{GAPDH, ALB, ACTB,  HPRT1, ADA, POLR2L, VCP, GPI, HBS1L} and \textit{SDHA}. For the evaluation with the XY-Scatter or MA-plots a linear model is calculated in order to achieve reasonable results it is recommended to use at least 10 \cite{harrell__regression_2015} data points.

<<createList>>=
mylist1<-c("ENSG00000111640","ENSG00000163631","ENSG00000075624",
           "ENSG00000165704","ENSG00000196839","ENSG00000177700",
           "ENSG00000165280","ENSG00000105220","ENSG00000112339",
           "ENSG00000073578")
@

But there is also a list of human housekeeping genes supplied by the \nvt tool, which can be retrieved the following way:

<<hethsList>>=
data(mylist_hs)

mylist_hs
@

\subsubsection{Load gene length data}

Instead of using the length data generated directly in R or using a simple flat file, it is also possible to load the gene or exon length data directly from an annotation file in gtf or gff format. This function utilizes the \href{https://bioconductor.org/packages/release/bioc/html/GenomicRanges.html}{GenomicRanges}\cite{lawrence2013} and \href{https://www.bioconductor.org/packages/3.3/bioc/html/rtracklayer.html}{rtracklayer}\cite{lawrence2009} packages.

\begin{itemize}
 \item gff-version: version of the provided gff file $[ gff1,gff2,gff3,gtf ]$
 \item gff-feature: feature to use $[ default: exon ]$
 \item gff-name: name to use $[ default: gene\_id ]$
\end{itemize}

<<loadLengthData>>=
#this line gets the path to the gff file provided in the NVT package
#(annotation from Chlamydia trachomatis, ACCESSION: NC_000117 )
mygffpath <- system.file("extdata", "Ctr-D-UW3CX.gff", package = "NVT")

#this function loads the gff file from the gffpath
mylen1 <- NVTloadgff(mygffpath,"gff3","gene","locus_tag")

head(mylen1)
@

\subsection{Generate NVTdata objects}

In the first step you need to generate an \textit{NVTdata} object with the \textit{NVTinit} function. Here you have to provide the list of housekeeping genes, the two gene expression samples and the normalization method. Optionally you can also add the gene or exon length data.

The normalization methods are:
\begin{itemize}
 \item N = No normalization
 \item TC = Total count normalization
 \item Med = Median normalization
 \item TMM = Trimmed Mean of M-values normalization
 \item UQ = Upper Quartile normalization
 \item UQ2 = Upper Quartile normalization (from \href{https://www.bioconductor.org/packages/release/bioc/html/NOISeq.html}{NOISeq}\cite{tarazona2011})
 \item Q = Quantile normalization implemented in \href{https://bioconductor.org/packages/release/bioc/html/limma.html}{limma}\cite{ritchie2015}
 \item RPKM = Reads Per Kilobase per Million mapped reads normalization
 \item RPM = Reads Per Million mapped reads normalization
 \item TPM = Transcripts Per Million normalization
 \item DEQ = Relative log expression method included in the \href{https://www.bioconductor.org/packages/release/bioc/html/DESeq.html}{DESeq}\cite{anders2010} package
 \item G = Use the provided genes to normalize
\end{itemize}

For the most methods no length information is required.

<<generateNVTobj1>>=
mynvt <- NVTinit(mylist1,myexp1,myexp2,"TMM")
@

But for RPKM and TPM normalization the length data has to be provided.

<<generateNVTobj2>>=
mynvt <- NVTinit(mylist1,myexp1,myexp2,"RPKM",mylen)
@

\subsubsection{Normalize the NVTdata }

The now initialized \textit{NVTdata} object can be normalized in the next step.

<<normlaizeNVTobj1>>=
mynorm <- NVTnormalize(mynvt)
@

The text output can be suppressed via verbose=FALSE.

<<normlaizeNVTobj2>>=
mynvt <- NVTnormalize(mynvt,verbose=F)
@

If required the now normalized data can be retrieved easily.

<<getnorm>>=
mynvalues <- show(mynorm)

head(mynvalues)
@

\subsection{Visualize expression data}

One of the key features of \nvt is the plotting of the XY-Scatter-Plots and MA-Plots. This can be done with the functions:
\textit{NVTplot}, \textit{NVTadvancedplot}, \textit{NVTmaplot} and \textit{NVTadvancedmaplot}.

\newpage

\subsubsection{Simple plot functions}

The normalized \textit{NVTdata} object can be visualized with the plot function. With the second parameter you can modify the size-ratio of the text and the data points. All expression values are shown as grey dots and the linear model as red line, it is calculated with the data from the housekeeping genes only. The dashed grey line highlights the diagonal, so the perfect correlation between the two data sets.

<<simpleplot, dev="pdf", fig.width=3.5, fig.height=3.5>>=
NVTplot(mynorm,0.4)
@

\begin{figure}[!h]
\centering
\includegraphics[width=.8\textwidth]{figure/simpleplot-1}
\caption{
  \textbf{XY-Scatter-Plot.}
  The resulting plot from the simple NVTplot function}
\label{fig:XY}
\end{figure}

\newpage

The \textit{NVTplotma} function works similar but produces an MA-Plot instead of a Scatter-Plot.

<<simplemaplot, dev="pdf", fig.width=3.5, fig.height=3.5>>=
NVTmaplot(mynorm,0.4)
@

\begin{figure}[!h]
\centering
\includegraphics[width=.8\textwidth]{figure/simplemaplot-1}
\caption{
  \textbf{MA-Plot.}
  The resulting plot from the simple NVTmaplot function}
\label{fig:MA}
\end{figure}

\newpage

\subsubsection{Advanced plot functions}

The \textit{NVTadvancedplot} plots via \href{https://cran.r-project.org/web/packages/ggplot2/index.html}{ggplot2}\cite{wickham2009} and the size parameters control data points, text and labels separately. Here we use the default values of 1 for the data points and the text and increase the labels of the housekeeping genes to 2. Again the grey dots represent the expression data and their density is visualized by the rug in dark red for x- and y-axis.
The linear model of the housekeeping gene data is shown in red and the diagonal is highlighted as grey dashed line. As we want to compare different methods we now normalize with the TMM method.

<<advancedplot, dev="pdf", fig.width=3.5, fig.height=3.5>>=
mynvt <- NVTinit(mylist1,myexp1,myexp2,"TMM",mylen)
mynorm <- NVTnormalize(mynvt)
NVTadvancedplot(mynorm,1,1,1)
@

\begin{figure}[!h]
\centering
\includegraphics[width=.8\textwidth]{figure/advancedplot-1}
\caption{
  \textbf{Advanced XY-Scatter-Plot.}
  The NVTadvancedplot function results in a plot produced by ggplot2 with a rug on both axis, indicating the density of the data-points}
\label{fig:adXY}
\end{figure}

\newpage

As alternative there is also the possibility to create an MA-Plot with the \textit{NVTadvancedmaplot} function.

<<advancedmaplot, dev="pdf", fig.width=3.5, fig.height=3.5>>=
NVTadvancedmaplot(mynorm,1,1,1)
@

\begin{figure}[!h]
\centering
\includegraphics[width=.8\textwidth]{figure/advancedmaplot-1}
\caption{
  \textbf{Advanced MA-Plot.}
  The NVTadvancedmaplot function results in a plot produced by ggplot2 with a rug on both axis, indicating the density of the data-points}
\label{fig:adMA}
\end{figure}

\newpage

\subsubsection{Linear model}

If required, the linear model plotted as red line can be retrieved with the \textit{NVTlm} function.

<<lm>>=
mylm <- NVTlm(mynorm)

summary(mylm)
@

\subsection{Correlation values}

In addition to the graphical representation of the gene expression data, the correlation coefficients of the housekeeping genes of the two samples can be calculated with the functions \textit{NVTpearson}, \textit{NVTrmsd} and \textit{NVTmae}.

\subsubsection{Pearson correlation}

The Pearson correlation coefficient of the normalized expression of the housekeeping genes is calculated with the following command, using an already normalized \textit{NVTdata} object.

<<pearson>>=
NVTpearson(mynorm)
@

\subsubsection{RMSD and MEA correlation}

The root mean square error (RMSE) also called the root mean square deviation (RMSD) is calculated with the \textit{NVTrmsd} function.

<<rmsd>>=
NVTrmsd(mynorm)
@

And the mean absolute error (MAE) can be calculated and retrieved with the \textit{NVTmae} function.

<<mae>>=
NVTmae(mynorm)
@

\subsection{Test all methods}

To test more normalization methods on the provided data sets in one single step, the correlation coefficients of all implemented normalization methods can be calculated with the \textit{NVTtestall} function.
It requires a normalized \textit{NVTdata} object and the correlation coefficient you are interested in. The method can be defined with:

\begin{itemize}
 \item p = Pearson correlation
 \item rmsd = root mean square deviation
 \item mae = mean absolute error
\end{itemize}

<<testall>>=
NVTtestall(mynorm,"p")
@

It is also possible to oppress text output via verbose=FALSE (default: verbose=TRUE)

<<testall_v>>=
NVTtestall(mynorm,"p",verbose=F)
@

\subsection{Example use case}

To show a typical use case, the RNA-Seq data of GEO accession: \href{http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE60052}{GSE60052} was used. The following data sets of healthy control lung cells and small cell lung carcinoma cells were used: healthy \textit{GSM1464282}, \textit{GSM1464283} \textit{GSM1464284} and
small cell lung cancer \textit{GSM1464289}, \textit{GSM1464290}, \textit{GSM1464291}. We expect that the overall expression patterns will be quite diverse if we compare healthy with cancer cell expression and it is strongly recommended to use genes which are stably expressed.

First we load the \nvt library, the gene length data, the housekeeping gene list and the expression data.

<<uc_getdata>>=
library("NVT")
data(myusecaseexp)
data(myusecaselen)
data(mylist_hs)

head(myusecaseexp)
@

Now we create an NVTobject with the expression of the first healthy and the first small cell lung cancer samples, add the gene length data and set the first normalization method to test to RPKM. We also apply the normalization and have a look at the resulting expression values.

<<uc_initdata>>=
mynvt <- NVTinit(mylist_hs,myusecaseexp[,1,drop=FALSE],myusecaseexp[,4,drop=FALSE],
"RPKM",myusecaselen)
mynorm <- NVTnormalize(mynvt)

mynvalues <- show(mynorm)
head(mynvalues)
@

\newpage

Then we create the first plot.

<<uc_simpleplot, dev="pdf", fig.width=3.5, fig.height=3.5>>=
NVTplot(mynorm,0.4)
@

\begin{figure}[!h]
\centering
\includegraphics[width=.8\textwidth]{figure/uc_simpleplot-1}
\caption{
  \textbf{XY-Scatter-Plot.}
  The resulting plot from the simple NVTplot function shows a broad cloud of expression values and the linear model is not very close to the diagonal}
\label{fig:uc_XY}
\end{figure}

\newpage

In addition we also create the MA-plot.

<<uc_advancedmaplot, dev="pdf", fig.width=3.5, fig.height=3.5>>=
NVTadvancedmaplot(mynorm,1,1,1)
@

\begin{figure}[!h]
\centering
\includegraphics[width=.8\textwidth]{figure/uc_advancedmaplot-1}
\caption{
  \textbf{Advanced MA-Plot.}
  The NVTadvancedmaplot function shows also that the expression of the genes is quite diverse resulting in this broad cloud and also the chosen genes are widely distributed and some are very distant to the horizontal 0-line indicating that their expression is strongly varying.}
\label{fig:uc_adMA}
\end{figure}

Despite we have seen that the chosen gene set is not optimal, we test all implemented normalization methods. We apply the NVTtestall function, which indicates that Q is the best normalization method based on the selected genes.

<<uc_testall>>=
NVTtestall(mynorm,"p")
@

In order to apply this test to all data sets we can use a simple loop to go through all healthy versus cancer comparisons.

<<uc_allvsall>>=
for (dataset1 in 1:3){
  dataset2 <- dataset1+3
  mynvt <- NVTinit(mylist_hs,myusecaseexp[,dataset1,drop=FALSE],
  myusecaseexp[,dataset2,drop=FALSE],"N",myusecaselen)
  mynorm <- NVTnormalize(mynvt)

  print(NVTtestall(mynorm,"p",verbose=F))
}
@

\newpage

\section{Session Info}

<<sessInfo, results="asis", echo=FALSE>>=
toLatex(sessionInfo())
@

<<resetOptions, results="hide", echo=FALSE>>=
options(prompt="> ", continue="+ ")
@

\newpage

\bibliography{library}

\end{document}
